// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  image         String?
  name          String
  phone         String?
  address       String?
  email         String?   @unique
  emailVerified DateTime?
  role          String    @default("CUSTOMER")
  Menu          Menu[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Menu {
  id           Int          @id @default(autoincrement())
  name         String
  price        Decimal
  menu_image   String?
  description  String?
  rating       Int          @default(0)
  is_available Boolean      @default(false)
  view_count   Int          @default(0)
  slug         String?
  creator      User?        @relation(fields: [creatorId], references: [id])
  creatorId    String?
  createdAt    DateTime     @default(now()) @map(name: "created_at")
  updatedAt    DateTime     @updatedAt @map(name: "updated_at")
  tags         TagsOnMenu[]
  categories   Category?    @relation(fields: [categoryId], references: [id])
  categoryId   Int?

  @@map("menus")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  menus Menu[]

  @@map("categories")
}

model TagsOnMenu {
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int
  menu   Menu @relation(fields: [menuId], references: [id])
  menuId Int

  @@id([menuId, tagId])
  @@map("tagsonmenu")
}

model Tag {
  id    Int          @id @default(autoincrement())
  name  String
  menus TagsOnMenu[]

  @@map("tags")
}
